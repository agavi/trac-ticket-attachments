Index: src/translation/AgaviGettextTranslator.class.php
===================================================================
--- src/translation/AgaviGettextTranslator.class.php
+++ src/translation/AgaviGettextTranslator.class.php
@@ -223,76 +223,12 @@
 			}
 		}
 
-		$headers = array();
-
-		if(count($data)) {
-			$headerData = str_replace("\r", '', $data['']);
-			$headerLines = explode("\n", $headerData);
-			foreach($headerLines as $line) {
-				$values = explode(':', $line, 2);
-				// skip empty / invalid lines
-				if(count($values) == 2) {
-					$headers[$values[0]] = $values[1];
-				}
-			}
-		}
-
+		$headers = AgaviGettextMoReader::parseHeaders($data);
+		
 		$this->pluralFormFunc = null;
 		if(isset($headers['Plural-Forms'])) {
-			$pf = $headers['Plural-Forms'];
-			if(preg_match('#nplurals=\d+;\s+plural=(.*)$#D', $pf, $match)) {
-				$funcCode = $match[1];
-				$validOpChars = array(' ', 'n', '!', '&', '|', '<', '>', '(', ')', '?', ':', ';', '=', '+', '*', '/', '%', '-');
-				if(preg_match('#[^\d' . preg_quote(implode('', $validOpChars), '#') . ']#', $funcCode, $errorMatch)) {
-					throw new AgaviException('Illegal character ' . $errorMatch[0] . ' in plural form ' . $funcCode);
-				}
-				
-				// add parenthesis around all ternary expressions. This is done 
-				// to make the ternary operator (?) have precedence over the delimiter (:)
-				// This will transform 
-				// "a ? 1 : b ? c ? 3 : 4 : 2" to "(a ? 1 : (b ? (c ? 3 : 4) : 2))" and
-				// "a ? b ? c ? d ? 5 : 4 : 3 : 2 : 1" to "(a ? (b ? (c ? (d ? 5 : 4) : 3) : 2) : 1)"
-				// "a ? b ? c ? 4 : 3 : d ? 5 : 2 : 1" to "(a ? (b ? (c ? 4 : 3) : (d ? 5 : 2)) : 1)"
-				// "a ? b ? c ? 4 : 3 : d ? 5 : e ? 6 : 2 : 1" to "(a ? (b ? (c ? 4 : 3) : (d ? 5 : (e ? 6 : 2))) : 1)"
-				
-				$funcCode = rtrim($funcCode, ';');
-				$parts = preg_split('#(\?|\:)#', $funcCode, -1, PREG_SPLIT_DELIM_CAPTURE);
-				$parenthesisCount = 0;
-				$unclosedParenthesisCount = 0;
-				$firstParenthesis = true;
-				$funcCode = '';
-				for($i = 0, $c = count($parts); $i < $c; ++$i) {
-					$lastPart = $i > 0 ? $parts[$i - 1] : null;
-					$part = $parts[$i];
-					$nextPart = $i + 1 < $c ? $parts[$i + 1] : null;
-					if($nextPart == '?') {
-						if($lastPart == ':') {
-							// keep track of parenthesis which need to be closed 
-							// directly after this ternary expression
-							++$unclosedParenthesisCount;
-							--$parenthesisCount;
-						}
-						$funcCode .= ' (' . $part;
-						++$parenthesisCount;
-					} elseif($lastPart == ':') {
-						$funcCode .= $part . ') ';
-						if($unclosedParenthesisCount > 0) {
-							$funcCode .= str_repeat(')', $unclosedParenthesisCount);
-							$unclosedParenthesisCount = 0;
-						}
-						--$parenthesisCount;
-					} else {
-						$funcCode .= $part;
-					}
-				}
-				if($parenthesisCount > 0) {
-					// add the missing top level parenthesis
-					$funcCode .= str_repeat(')', $parenthesisCount);
-				}
-				$funcCode .= ';';
-				$funcCode = 'return ' . str_replace('n', '$n', $funcCode);
-				$this->pluralFormFunc = create_function('$n', $funcCode);
-			}
+			$funcCode = AgaviGettextMoReader::generatePluralFormFuncCode($headers['Plural-Forms'], '$n');
+			$this->pluralFormFunc = create_function('$n', $funcCode);
 		}
 
 		$this->domainData[$domain] = array('headers' => $headers, 'msgs' => $data);
Index: src/translation/gettext/AgaviGettextMoReader.class.php
===================================================================
--- src/translation/gettext/AgaviGettextMoReader.class.php
+++ src/translation/gettext/AgaviGettextMoReader.class.php
@@ -87,6 +87,105 @@
 
 		return $strings;
 	}
+	
+	/**
+	 * Parses the headers of a .mo file read by readFile()
+	 *
+	 * @param      string The headers from readFile().
+	 *
+	 * @return     array The parsed headers.
+	 *
+	 * @author     Dominik del Bondio <ddb@bitxtender.com>
+	 * @author     Thomas Bachem <mail@thomasbachem.com>
+	 */
+	public static function parseHeaders(array $data) {
+		$headers = array();
+		
+		if(count($data)) {
+			$headerData = str_replace("\r", '', $data['']);
+			$headerLines = explode("\n", $headerData);
+			foreach($headerLines as $line) {
+				$values = explode(':', $line, 2);
+				// skip empty / invalid lines
+				if(count($values) == 2) {
+					$headers[$values[0]] = $values[1];
+				}
+			}
+		}
+		
+		return $headers;
+	}
+	
+	/**
+	 * Parses a .mo file and returns the data as an array.
+	 * For the format see the gettext manual
+	 *
+	 * @param      string The value of the 'Plural-Forms' MO header.
+	 * @param      string The variable name to use in the function code,
+	 *                    including the "$" sign for PHP code.
+	 *
+	 * @return     string The generated function code for e.g. create_function().
+	 *
+	 * @author     Dominik del Bondio <ddb@bitxtender.com>
+	 * @author     Thomas Bachem <mail@thomasbachem.com>
+	 */
+	public static function generatePluralFormFuncCode($pluralFormsHeader, $var = '$n') {
+		$funcCode = null;
+		
+		if(preg_match('#nplurals=\d+;\s+plural=(.*)$#D', $pluralFormsHeader, $match)) {
+			$funcCode = $match[1];
+			$validOpChars = array(' ', 'n', '!', '&', '|', '<', '>', '(', ')', '?', ':', ';', '=', '+', '*', '/', '%', '-');
+			if(preg_match('#[^\d' . preg_quote(implode('', $validOpChars), '#') . ']#', $funcCode, $errorMatch)) {
+				throw new AgaviException('Illegal character ' . $errorMatch[0] . ' in plural form ' . $funcCode);
+			}
+			
+			// add parenthesis around all ternary expressions. This is done 
+			// to make the ternary operator (?) have precedence over the delimiter (:)
+			// This will transform 
+			// "a ? 1 : b ? c ? 3 : 4 : 2" to "(a ? 1 : (b ? (c ? 3 : 4) : 2))" and
+			// "a ? b ? c ? d ? 5 : 4 : 3 : 2 : 1" to "(a ? (b ? (c ? (d ? 5 : 4) : 3) : 2) : 1)"
+			// "a ? b ? c ? 4 : 3 : d ? 5 : 2 : 1" to "(a ? (b ? (c ? 4 : 3) : (d ? 5 : 2)) : 1)"
+			// "a ? b ? c ? 4 : 3 : d ? 5 : e ? 6 : 2 : 1" to "(a ? (b ? (c ? 4 : 3) : (d ? 5 : (e ? 6 : 2))) : 1)"
+			
+			$funcCode = rtrim($funcCode, ';');
+			$parts = preg_split('#(\?|\:)#', $funcCode, -1, PREG_SPLIT_DELIM_CAPTURE);
+			$parenthesisCount = 0;
+			$unclosedParenthesisCount = 0;
+			$funcCode = '';
+			for($i = 0, $c = count($parts); $i < $c; ++$i) {
+				$lastPart = $i > 0 ? $parts[$i - 1] : null;
+				$part = $parts[$i];
+				$nextPart = $i + 1 < $c ? $parts[$i + 1] : null;
+				if($nextPart == '?') {
+					if($lastPart == ':') {
+						// keep track of parenthesis which need to be closed 
+						// directly after this ternary expression
+						++$unclosedParenthesisCount;
+						--$parenthesisCount;
+					}
+					$funcCode .= ' (' . $part;
+					++$parenthesisCount;
+				} elseif($lastPart == ':') {
+					$funcCode .= $part . ') ';
+					if($unclosedParenthesisCount > 0) {
+						$funcCode .= str_repeat(')', $unclosedParenthesisCount);
+						$unclosedParenthesisCount = 0;
+					}
+					--$parenthesisCount;
+				} else {
+					$funcCode .= $part;
+				}
+			}
+			if($parenthesisCount > 0) {
+				// add the missing top level parenthesis
+				$funcCode .= str_repeat(')', $parenthesisCount);
+			}
+			$funcCode .= ';';
+			$funcCode = 'return ' . str_replace('n', $var, $funcCode);
+		}
+		
+		return $funcCode;
+	}
 
 }
 
