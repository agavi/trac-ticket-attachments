Index: src/request/AgaviWebRequest.class.php
===================================================================
--- src/request/AgaviWebRequest.class.php	(Revision 2167)
+++ src/request/AgaviWebRequest.class.php	(Arbeitskopie)
@@ -33,6 +33,11 @@
  */
 class AgaviWebRequest extends AgaviRequest
 {
+    /**
+     * @var        string the current protocol version
+     */ 
+    protected $protocolVersion = '';
+	
 	/**
 	 * @var        string The current URL scheme.
 	 */
@@ -68,6 +73,16 @@
 	 */
 	protected $url = '';
 
+
+    /**
+     * retrieve the protocol version of the request
+     * Example: HTTP/1.1
+     */
+    public function getProtocolVersion()
+    {
+        return $this->protocolVersion;
+    }
+    
 	/**
 	 * Retrieve the scheme part of a request URL, typically the protocol.
 	 * Example: "http".
@@ -290,6 +305,7 @@
 			'REQUEST_METHOD' => 'REQUEST_METHOD',
 			'SERVER_NAME' => 'SERVER_NAME',
 			'SERVER_PORT' => 'SERVER_PORT',
+			'SERVER_PROTOCOL' => 'SERVER_PROTOCOL'
 		), (isset($parameters['sources']) && is_array($parameters['sources']) ? $parameters['sources'] : array()));
 
 		$methods = array('GET' => 'read', 'POST' => 'write', 'PUT' => 'create', 'DELETE' => 'remove');
@@ -312,6 +328,20 @@
 			default:
 				$this->setMethod($methods['GET']);
 		}
+		
+		$PROTOCOL_VERSION = self::getSourceValue($sources['SERVER_PROTOCOL'], isset($parameters['sources']['SERVER_PROTOCOL']) ? null : 'HTTP/1.1');
+        
+        switch(strtoupper($PROTOCOL_VERSION))
+        {
+            case 'HTTP/1.1':
+                $this->protocolVersion = 'HTTP/1.1';
+                break;
+            case 'HTTP/1.0':
+                $this->protocolVersion = 'HTTP/1.0';
+                break;
+            default:
+                $this->protocolVersion = 'HTTP/1.1';
+        }
 
 		$HTTPS = self::getSourceValue($sources['HTTPS'], isset($parameters['sources']['HTTPS']) ? null : 'off');
 
Index: src/response/AgaviWebResponse.class.php
===================================================================
--- src/response/AgaviWebResponse.class.php	(Revision 2167)
+++ src/response/AgaviWebResponse.class.php	(Arbeitskopie)
@@ -32,7 +32,7 @@
 	/**
 	 * @var        array An array of all HTTP status codes and their message.
 	 */
-	protected $httpStatusCodes = array(
+	protected $http11StatusCodes = array(
 		'100' => "HTTP/1.1 100 Continue",
 		'101' => "HTTP/1.1 101 Switching Protocols",
 		'200' => "HTTP/1.1 200 OK",
@@ -75,6 +75,47 @@
 		'505' => "HTTP/1.1 505 HTTP Version Not Supported",
 	);
 	
+	protected $http10StatusCodes = array(
+		'100' => "HTTP/1.0 100 Continue",
+		'101' => "HTTP/1.0 101 Switching Protocols",
+		'200' => "HTTP/1.0 200 OK",
+		'201' => "HTTP/1.0 201 Created",
+		'202' => "HTTP/1.0 202 Accepted",
+		'204' => "HTTP/1.0 204 No Content",
+		'205' => "HTTP/1.0 205 Reset Content",
+		'206' => "HTTP/1.0 206 Partial Content",
+		'300' => "HTTP/1.0 300 Multiple Choices",
+		'301' => "HTTP/1.0 301 Moved Permanently",
+		'302' => "HTTP/1.0 302 Found",
+		'304' => "HTTP/1.0 304 Not Modified",
+		'400' => "HTTP/1.0 400 Bad Request",
+		'401' => "HTTP/1.0 401 Unauthorized",
+		'402' => "HTTP/1.0 402 Payment Required",
+		'403' => "HTTP/1.0 403 Forbidden",
+		'404' => "HTTP/1.0 404 Not Found",
+		'405' => "HTTP/1.0 405 Method Not Allowed",
+		'406' => "HTTP/1.0 406 Not Acceptable",
+		'407' => "HTTP/1.0 407 Proxy Authentication Required",
+		'408' => "HTTP/1.0 408 Request Timeout",
+		'409' => "HTTP/1.0 409 Conflict",
+		'410' => "HTTP/1.0 410 Gone",
+		'411' => "HTTP/1.0 411 Length Required",
+		'412' => "HTTP/1.0 412 Precondition Failed",
+		'413' => "HTTP/1.0 413 Request Entity Too Large",
+		'414' => "HTTP/1.0 414 Request-URI Too Long",
+		'415' => "HTTP/1.0 415 Unsupported Media Type",
+		'416' => "HTTP/1.0 416 Requested Range Not Satisfiable",
+		'417' => "HTTP/1.0 417 Expectation Failed",
+		'500' => "HTTP/1.0 500 Internal Server Error",
+		'501' => "HTTP/1.0 501 Not Implemented",
+		'502' => "HTTP/1.0 502 Bad Gateway",
+		'503' => "HTTP/1.0 503 Service Unavailable",
+		'504' => "HTTP/1.0 504 Gateway Timeout",
+		'505' => "HTTP/1.0 505 HTTP Version Not Supported",
+	);
+	
+	protected $httpStatusCodes;
+	
 	/**
 	 * @var        string The HTTP status code to send for the response.
 	 */
@@ -115,6 +156,16 @@
 			'cookie_secure'   => isset($parameters['cookie_secure'])   ? $parameters['cookie_secure']   : false,
 			'cookie_httponly' => isset($parameters['cookie_httponly']) ? $parameters['cookie_httponly'] : false,
 		));
+		
+		switch ($context->getRequest()->getProtocolVersion())
+		{
+		    case 'HTTP/1.1':
+		        $this->httpStatusCodes = $this->http11StatusCodes;
+		        break;
+		    case 'HTTP/1.0':
+		        $this->httpStatusCodes = $this->http10StatusCodes;
+		        break;
+		}
 	}
 	
 	/**
