Index: src/request/AgaviWebRequest.class.php
===================================================================
--- src/request/AgaviWebRequest.class.php	(Revision 3760)
+++ src/request/AgaviWebRequest.class.php	(Arbeitskopie)
@@ -297,11 +297,12 @@
 	 */
 	public function initialize(AgaviContext $context, array $parameters = array())
 	{
+		$rla = ini_get('register_long_arrays');
+
 		parent::initialize($context, $parameters);
 
 		// very first thing to do: remove magic quotes
 		if(function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {
-			$rla = ini_get('register_long_arrays');
 			$_GET = self::clearMagicQuotes($_GET);
 			$_POST = self::clearMagicQuotes($_POST);
 			$_COOKIE = self::clearMagicQuotes($_COOKIE);
@@ -390,6 +391,26 @@
 			$_SERVER['REQUEST_URI'] = $this->getRequestUri();
 		}
 
+		// okay, this is really bad
+		// Internet Explorer (many versions, many OSes) seem to be sending improperly urlencoded URLs to the server, in violation of the HTTP RFC
+		// this can cause a number of problems, most notably html special chars not being escaped and potentially ending up this way in the output
+		// the result is an XSS attack vector, e.g. on AgaviWebRouting::gen(null)
+		// so we escape those. but not the ampersand, or the query string gets messed up
+		// we also encode the backtick (Suhosin does this, too), and the space character
+		// in theory, we shouldn't encode the single quote either, since it's a reserved sub-delimiter as per RFC 3986 - however, that would allow injection again in documents that use single quotes as attribute delimiters, and it's up to implementations to encode sub-delimiters if they deem it necessary
+		// great, huh?
+		// more details:
+		// http://trac.agavi.org/ticket/1019
+		// http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0417
+		list($this->requestUri, $_SERVER['REQUEST_URI']) = str_replace(
+			array(' ',   '"',   '\'',  '<',   '>',   '`',   /*'&'*/),
+			array('%20', '%22', '%27', '%3C', '%3E', '%60', /*'%26'*/),
+			array($this->requestUri, $_SERVER['REQUEST_URI'])
+		);
+		if($rla) {
+			$GLOBALS['HTTP_SERVER_VARS']['REQUEST_URI'] = $this->getRequestUri();
+		}
+		
 		// 'scheme://authority' is necessary so parse_url doesn't stumble over '://' in the request URI
 		$parts = array_merge(array('path' => '', 'query' => ''), parse_url('scheme://authority' . $this->getRequestUri()));
 		$this->urlPath = $parts['path'];
